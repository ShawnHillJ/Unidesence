import perlin

def ch_iron(xvar, yvar, zvar, seed):
    return int(perlin.snoise3(xvar*0.01,yvar*0.01,zvar*0.01))
def ch_diamond(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_dark_crystal(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_aluminum(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_tin(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_thyrumite(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_copper(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_coal(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_emerald(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_ruby(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_gold(xvar, yvar, zvar, seed):
    return int(perlin.snoise3((xvar*0.01)+seed,(yvar*0.01)+seed,(zvar*0.01)+seed))
def ch_tree(xvar, yvar, seed):
    return int(perlin.snoise2((xvar*0.01)+seed,(yvar*0.01)+seed)) == 1

tree_overlay = [[['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000']],
                [['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000']],
                [['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','018','030','030','030'],['000','000','000','030','030','000'],['000','000','000','030','030','000']],
                [['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000']],
                [['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000'],['000','000','000','030','030','000']]]

#this generates one cell, 100X100X200 Blocks using these functions

def init_cell(coords):
    cell_list="["+str(coords)+"]"
#initial layering
    block_list=[]
    for x in range(1,10):
        block_list_y=[]
        for y in range(1,10):
            block_list_z=[]
            point=perlin.snoise2(x*0.01,y*0.01)
            top=round(point*64)
            if top % 2 == 1:
                top += 1
            for z in range(-100, 100, 2):
                if z == -100:
                    block_list_z.append('001')
                elif z in range(-98,-86,2) and ch_diamond(x, y, z, seed) == 1:
                    block_list_z.append('014')
                elif z in range(-98,int(top - 4), 2) and ch_dark_crystal(x,y,z,seed) == 1:
                    block_list_z.append('016')
                elif z in range(-98,-92, 2) and ch_emerald(x,y,z,seed) == 1:
                    block_list_z.append('015')
                elif z in range(-98,-80, 2) and ch_ruby(x,y,z,seed) == 1:
                    block_list_z.append('031')
                elif z in range(-98,int(top - 4), 2) and ch_coal(x,y,z,seed) == 1:
                    block_list_z.append('006')
                elif z in range(-98,-50, 2) and ch_gold(x,y,z,seed) == 1:
                    block_list_z.append('011')
                elif z in range(-98,int(top-4), 2) and ch_thyrumite(x,y,z,seed) == 1:
                    block_list_z.append('012')
                elif z in range(-98,int(top-4), 2) and ch_tin(x,y,z,seed) == 1:
                    block_list_z.append('007')
                elif z in range(-98,int(top-4), 2) and ch_aluminum(x,y,z,seed) == 1:
                    block_list_z.append('012')
                elif z in range(-98,int(top-4), 2) and ch_copper(x,y,z,seed) == 1:
                    block_list_z.append('012')
                elif z in range(-98,int(top-4), 2) and ch_iron(x,y,z,seed) == 1:
                    block_list_z.append('012')
                elif z in range(-98,int(top-4), 2):
                    block_list_z.append('005')
                elif z in range(int(top-2),int(top), 2):
                    block_list_z.append('003')
                elif z == top:
                    block_list_z.append('004')
                else:
                    block_list_z.append('000')
            block_list_y.append(block_list_z)
        block_list.append(block_list_y)
#Tree chance
    for x in range(9):
        for y in range(9):
            if ch_tree(x, y, seed) == True:
#                print(block_list[x][y].index('004'))
                z = block_list[x][y].index('004')+1
                for g in range(5):
                    for h in range(5):
                        for j in range(5):
                            try:
                                block_list[x+g][y+h][z+j] = tree_overlay[g][h][j]
                            except Exception:
                                pass
            else:
                pass
#Finally, the finished string is pushed out of the function
    return cell_list

#writes the cell to a cell file

def write_cell_list(the_list, filename):
    open(filename, "w")
    filename.write("vers alpha_1.0.0.0\n")
    for item in the_list:
        filename.write("%s/n" % item)
    filename.write("]")
    file.close

#init_cell(1, 2, 4, [0,0], 1, 5324)
#print(world_list)
